"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var TdProxy_1 = require("./TdProxy");
var TdClient = /** @class */ (function () {
    function TdClient(config) {
        this.timeout = 10;
        this.destroyed = false;
        this.pending = new Map();
        this.queryId = 0;
        this.sleepPromise = null;
        this.stack = [];
        this.wakeup = null;
        this.handleUpdate = config.handleUpdate;
        this.handleError = config.handleError;
        this.serialize = utils_1.createSerializer();
        this.deserialize = utils_1.createDeserializer(config.models);
        this.tdlib = new TdProxy_1.TdProxy({ command: config.command });
        this.loop();
    }
    Object.defineProperty(TdClient.prototype, "tdClient", {
        get: function () {
            return this._tdClient || (this._tdClient = this.tdlib.create());
        },
        enumerable: true,
        configurable: true
    });
    TdClient.prototype.destroy = function () {
        this.pause();
        Array.from(this.pending).forEach(function (_a) {
            var pending = _a[1];
            pending.reject(new Error('Request has been canceled due instance destroying.'));
        });
        this.pending.clear();
        this.tdlib.destroy(this.tdClient);
        this.sleepPromise = null;
        this.wakeup = null;
        this.destroyed = true;
    };
    TdClient.prototype.execute = function (request) {
        var id = "q" + ++this.queryId;
        var method = request.method, params = request.params;
        try {
            var data = this.tdlib.execute(this.tdClient, JSON.stringify(__assign(__assign({}, params), { '@extra': id, _: method }), this.serialize));
            return JSON.parse(data, this.deserialize);
        }
        catch (e) {
            throw new Error('[TdJsonClient] received invalid JSON');
        }
    };
    TdClient.prototype.pause = function () {
        var _this = this;
        if (!this.wakeup) {
            this.sleepPromise = new Promise(function (resolve) {
                _this.wakeup = resolve;
            });
        }
    };
    TdClient.prototype.resume = function () {
        if (this.wakeup) {
            this.wakeup();
            this.sleepPromise = null;
            this.wakeup = null;
        }
    };
    TdClient.prototype.send = function (request) {
        var _this = this;
        var id = "q" + ++this.queryId;
        var method = request.method, params = request.params;
        return new Promise(function (resolve, reject) {
            _this.pending.set(id, { _: method, resolve: resolve, reject: reject });
            return _this.tdlib.send(_this.tdClient, JSON.stringify(__assign(__assign({}, params), { '@extra': id, _: method }), _this.serialize));
        });
    };
    TdClient.prototype.addToStack = function (response) {
        if (response && !this.destroyed) {
            this.stack.push(response);
            if (this.stack.length === 1) {
                this.handleResponse().catch(this.handleError);
            }
        }
    };
    TdClient.prototype.handleResponse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, requestId, deferred;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = this.stack.shift();
                        if (!response) {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        requestId = response['@extra'];
                        deferred = requestId && this.pending.get(requestId);
                        delete response['@extra'];
                        if (!(deferred && requestId)) return [3 /*break*/, 1];
                        this.pending.delete(requestId);
                        deferred.resolve(response);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.handleUpdate(response)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        setImmediate(function () { return _this.handleResponse(); });
                        return [2 /*return*/];
                }
            });
        });
    };
    TdClient.prototype.loop = function () {
        var _this = this;
        if (!this.destroyed) {
            (this.sleepPromise || Promise.resolve())
                .then(function () { return _this.receive(); })
                .then(function (response) { return _this.addToStack(response); })
                .catch(this.handleError)
                .finally(function () { return setImmediate(function () { return _this.loop(); }); });
        }
    };
    TdClient.prototype.receive = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.tdlib.receive(this.tdClient, this.timeout)];
                    case 1:
                        data = _a.sent();
                        if (data === null) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, JSON.parse(data, this.deserialize)];
                    case 2:
                        e_1 = _a.sent();
                        throw new Error('[TdJsonClient] received invalid JSON');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return TdClient;
}());
exports.TdClient = TdClient;
