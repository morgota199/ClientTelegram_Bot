"use strict";
/* eslint-disable @typescript-eslint/camelcase,@typescript-eslint/no-explicit-any */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ffi = __importStar(require("ffi-napi"));
var path_1 = require("path");
var ref = __importStar(require("ref-napi"));
var PATH_TO_LIBRARY_FILE = process.platform === 'win32' ? 'tdjson' : 'libtdjson';
function buildQuery(query) {
    var buffer = Buffer.from(query + '\0', 'utf-8');
    buffer.type = ref.types.CString;
    return buffer;
}
var TdProxy = /** @class */ (function () {
    function TdProxy(_a) {
        var command = _a.command;
        // @formatter:off
        this.client = ffi.Library(path_1.resolve(command || PATH_TO_LIBRARY_FILE), {
            td_json_client_create: ['pointer', []],
            td_json_client_send: ['void', ['pointer', 'string']],
            td_json_client_receive: ['string', ['pointer', 'double']],
            td_json_client_execute: ['string', ['pointer', 'string']],
            td_json_client_destroy: ['void', ['pointer']]
        });
        // @formatter:on
    }
    TdProxy.prototype.create = function () {
        return this.client.td_json_client_create();
    };
    TdProxy.prototype.destroy = function (client) {
        this.client.td_json_client_destroy(client);
    };
    TdProxy.prototype.execute = function (client, query) {
        return this.client.td_json_client_execute(client, buildQuery(query));
    };
    TdProxy.prototype.receive = function (client, timeout) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.client.td_json_client_receive.async(client, timeout, function (error, response) {
                if (error) {
                    return reject(error);
                }
                return resolve(response);
            });
        });
    };
    TdProxy.prototype.send = function (client, query) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.client.td_json_client_send.async(client, buildQuery(query), function (error) {
                if (error) {
                    return reject(error);
                }
                resolve();
            });
        });
    };
    return TdProxy;
}());
exports.TdProxy = TdProxy;
