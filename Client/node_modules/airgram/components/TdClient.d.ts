/// <reference types="node" />
import { ApiRequest, PlainObjectToModelTransformer, TdObject } from '@airgram/core';
export interface Pending {
    _: string;
    resolve: (result: TdObject) => unknown;
    reject: (error: Error) => unknown;
}
export interface TdClientConfig {
    command?: string;
    handleUpdate: (update: TdObject) => Promise<unknown>;
    handleError: (error: Error | string) => void;
    models?: PlainObjectToModelTransformer;
}
export declare class TdClient {
    timeout: number;
    private _tdClient?;
    private readonly deserialize;
    private destroyed;
    private readonly handleError;
    private readonly handleUpdate;
    private readonly pending;
    private queryId;
    private readonly serialize;
    private sleepPromise;
    private stack;
    private readonly tdlib;
    private wakeup;
    constructor(config: TdClientConfig);
    get tdClient(): Buffer;
    destroy(): void;
    execute(request: ApiRequest): TdObject;
    pause(): void;
    resume(): void;
    send(request: ApiRequest): Promise<TdObject>;
    private addToStack;
    private handleResponse;
    private loop;
    private receive;
}
